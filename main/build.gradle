plugins {
    id 'cpp-application'
}

String LIBTORRENT_LIBRARY_PATH = "/opt/libtorrent/bin/gcc-6.3.0/debug/link-static/threading-multi"
String GRPC_LIBRARY_PATH = "/opt/grpc/libs/opt"
String PROTOBUF_LIBRARY_PATH = "/opt/grpc/third_party/protobuf/src/.libs"
String LOCAL_LIBRARIES_PATH = "/usr/lib/x86_64-linux-gnu"

String APPLICATION_INCLUDE_PATH = "src/main/headers"
String BOOST_INCLUDE_PATH = "/opt/boost"
String LIBTORRENT_INCLUDE_PATH = "/opt/libtorrent/include"
String GRPC_INCLUDE_PATH = "/opt/grpc/include"
String PROTOBUF_INCLUDE_PATH = "/opt/grpc/third_party/protobuf/src"

application {
    targetMachines.add(machines.linux.x86_64)
    privateHeaders {
        from(GRPC_INCLUDE_PATH)
        from(LIBTORRENT_INCLUDE_PATH)
        from(PROTOBUF_INCLUDE_PATH)
        from(BOOST_INCLUDE_PATH)
        from(APPLICATION_INCLUDE_PATH)
    }
}

dependencies {
    implementation files(LIBTORRENT_LIBRARY_PATH + "/libtorrent.a")
    implementation files(GRPC_LIBRARY_PATH + "/libgrpc.a")
    implementation files(GRPC_LIBRARY_PATH + "/libgrpc++.a")
    implementation files(PROTOBUF_LIBRARY_PATH + "/libprotobuf.a")
    implementation files(LOCAL_LIBRARIES_PATH + "/libpthread.so")
    implementation files(LOCAL_LIBRARIES_PATH + "/libz.a")
    implementation files(LOCAL_LIBRARIES_PATH + "/libcares.a")
}

model {
    toolChains {
        gcc(Gcc) {
            eachPlatform {
                cppCompiler.withArguments { args ->
                    args << '-std=c++11'
                }
                linker.withArguments { args ->
                    args << '-L' + LIBTORRENT_LIBRARY_PATH
                    args << '-ltorrent'
                    args << '-L' + GRPC_LIBRARY_PATH
                    args << '-lgrpc'
                    args << '-lgrpc++'
                    args << '-L' + PROTOBUF_LIBRARY_PATH
                    args << '-lprotobuf'
                    args << '-lcares'
                    args << '-lz'
                    args << '-lpthread'
                }
            }
        }
    }
    platforms {
        x64 {
            architecture "x86_64"
        }
    }
}
